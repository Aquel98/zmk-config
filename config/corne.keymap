/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        Lock: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_WIN &kp L>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE     &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y    &kp U  &kp I         &kp O    &kp P      &kp LEFT_BRACKET
&kp BACKSPACE  &kp A  &kp S  &kp D             &kp F  &kp G        &kp H    &kp J  &kp K         &kp L    &kp SEMI   &kp SQT
&kp LSHFT      &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N    &kp M  &kp COMMA     &kp DOT  &kp RCTRL  &kp RIGHT_SHIFT
                             &kp LEFT_CONTROL  &mo 2  &kp SPACE    &kp RET  &mo 1  &kp LEFT_ALT
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans     &kp EXCLAMATION   &kp RS(MINUS)          &kp RA(N7)  &kp RA(N0)  &kp RA(NON_US_BSLH)      &kp SQT        &kp NON_US_BACKSLASH  &kp RS(NON_US_BSLH)  &kp RA(NUMBER_4)  &kp DOUBLE_QUOTES  &kp NON_US_HASH
&trans     &kp RS(NUMBER_6)  &kp HASH               &kp RS(N8)  &kp RS(N9)  &kp RA(NUMBER_2)         &kp RA(MINUS)  &kp RS(COMMA)         &kp RS(PERIOD)       &kp RS(N0)        &kp RS(SLASH)      &kp RS(A)
&kp LSHFT  &kp PERCENT       &kp RS(RIGHT_BRACKET)  &kp RA(N8)  &kp RA(N9)  &kp RA(RIGHT_BRACKET)    &kp MINUS      &kp SLASH             &kp RS(NON_US_HASH)  &kp RS(N7)        &kp EQUAL          &trans
                                                    &trans      &trans      &kp SPACE                &kp RET        &trans                &trans
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &kp N0
            >;
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans    &kp F8  &kp F9          &kp F10     &kp F11           &kp F12       &trans        &kp HOME          &kp UP_ARROW  &kp END          &trans   &trans
&kp BSPC  &kp F1  &kp F2          &kp F3      &kp F4            &kp F6        &bt BT_SEL 1  &kp LEFT          &kp DOWN      &kp RIGHT_ARROW  &kp TAB  &trans
&trans    &Lock   &kp C_PREVIOUS  &kp C_NEXT  &kp C_PLAY_PAUSE  &bt BT_CLR    &bt BT_SEL 0  &kp LS(LEFT_ALT)  &kp LALT      &kp LALT         &trans   &trans
                                  &kp LGUI    &trans            &kp SPACE     &kp RET       &trans            &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SymbolsAndNumbers {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
